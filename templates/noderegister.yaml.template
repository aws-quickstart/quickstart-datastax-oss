AWSTemplateFormatVersion: 2010-09-09
Description: Create the seednodes
Parameters:
  HashKeyElementName:
    Description: HashType PrimaryKey Name
    Type: String
    Default: hostname
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: '1'
    MaxLength: '2048'
    ConstraintDescription: must contain only alphanumberic characters
  PublicSubnet1ID:
    Description: Public Subnet Id 1
    Type: 'AWS::EC2::Subnet::Id'
  KeyPairName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Name of an existing EC2 KeyPair.
  RemoteAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access
    Type: String
  VPCID:
    Description: VPC ID
    Type: 'AWS::EC2::VPC::Id'
  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR Block for the VPC
    Type: String
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-datastax-ddac/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: "must be a valid EC2 instance type."
    Default: t2.medium
    Description: "EC2 instance type"
    Type: String
Conditions:
  GovCloudCondition: !Equals
    - !Ref AWS::Region
    - us-gov-west-1
Mappings:
  AWSAMIRegionMap:
    AMI:
      US1604HVM: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180405
    ap-northeast-1:
      US1604HVM: ami-60a4b21c
    ap-northeast-2:
      US1604HVM: ami-633d920d
    ap-south-1:
      US1604HVM: ami-dba580b4
    ap-southeast-1:
      US1604HVM: ami-82c9ecfe
    ap-southeast-2:
      US1604HVM: ami-2b12dc49
    ca-central-1:
      US1604HVM: ami-9d7afcf9
    eu-central-1:
      US1604HVM: ami-cd491726
    eu-west-1:
      US1604HVM: ami-74e6b80d
    eu-west-2:
      US1604HVM: ami-506e8f37
    sa-east-1:
      US1604HVM: ami-5782d43b
    us-east-1:
      US1604HVM: ami-6dfe5010
    us-east-2:
      US1604HVM: ami-e82a1a8d
    us-west-1:
      US1604HVM: ami-493f2f29
    us-west-2:
      US1604HVM: ami-ca89eeb2
Resources:
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
    #    RoleName: !Sub Role-${DDBTable}
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "RootRole"
  DynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: dynamo-policy
        Roles: 
        - !Ref RootRole
        PolicyDocument:
           Version: 2012-10-17
           Statement:
             - Sid: ListAndDescribe
               Effect: Allow
               Action:
                 - 'dynamodb:List*'
                 - 'dynamodb:DescribeReservedCapacity*'
                 - 'dynamodb:DescribeLimits'
                 - 'dynamodb:DescribeTimeToLive'
               Resource: '*'
             - Sid: SpecificTable
               Effect: Allow
               Action:
                 - 'dynamodb:BatchGet*'
                 - 'dynamodb:DescribeStream'
                 - 'dynamodb:DescribeTable'
                 - 'dynamodb:Get*'
                 - 'dynamodb:Query'
                 - 'dynamodb:Scan'
                 - 'dynamodb:BatchWrite*'
                 - 'dynamodb:CreateTable'
                 - 'dynamodb:Delete*'
                 - 'dynamodb:Update*'
                 - 'dynamodb:PutItem'
               Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}*
  DDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: !Ref HashKeyElementName
          AttributeType: S
      KeySchema:
        - AttributeName: !Ref HashKeyElementName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 10
  DDACSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH access to the DDAC Seed.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VPCCIDR
  DDACSeedNode1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          full_install:
            - install_cfn
            - install_ddac
            - post_install
        gen_ssh_key:
          commands:
            01_gen_ssh_key:
              command:
                - ''
                - - |
                    #!/usr/bin/env bash -e 
                  - |
                    apt-get -y install awscli 
                  - |
                    cd ~ubuntu/.ssh/ 
                  - |
                    ssh-keygen -t rsa -N '' -f lcm.pem 
                  - |
                    chown ubuntu:ubuntu lcm.pem* 
                  - |
                    echo 'Generated lcm.pem and lcm.pem.pub' 
                  - 'aws s3 cp lcm.pem.pub s3://'
                  - S3Bucket
                  - ' --region '
                  - 'AWS::Region'
                  - |2
                     
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                - ''
                - - |
                    [main]
                  - stack=
                  - 'AWS::StackId'
                  - |+
                  - region=
                  - 'AWS::Region'
                  - |+
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.DDACSeedNode1.Metadata.AWS::CloudFormation::Init
                  - 'action=/usr/local/bin/cfn-init -v '
                  - '         --stack '
                  - 'AWS::StackName'
                  - '         --resource DDACSeedNode1 '
                  - '         --configsets full_install '
                  - '         --region '
                  - 'AWS::Region'
                  - |+
                  - |
                    runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_ddac:
          files:
            /home/ubuntu/deploy-dse.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/deploy-dse.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root            
          commands:
            01_install_ddac:
              command:
                - ''
                - - |
                    #!/usr/bin/env bash -e 
                  - |
                    cloud_type="aws" 
                  - |
                    cd ~ && ./deploy-dse.sh 
                  - |
        post_install:
            command:
                - ''
                - - |
                    #!/usr/bin/env bash -e 
                  - |
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref RootInstanceProfile
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet1ID
          GroupSet:
            - !Ref DDACSecGroup
      KeyName: !Ref KeyPairName
      HostId: seednode1
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - US1604HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash -xe
          #CFN Signaling fuctions (begin)
          function cfn_fail
          {
            cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource DDACSeedNode1
            exit 1
          }
          function cfn_success
          {
            cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource DDACSeedNode1
            exit 0
          }
          #Load Linux utils
          until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
          cd /quickstart-linux-utilities && source quickstart-cfn-tools.source
          # Constants
          S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
          REGISTER=${DDBTable}
          # Prep operating systems
          qs_update-os || qs_err
          qs_bootstrap_pip || qs_err
          qs_aws-cfn-bootstrap || qs_err
          # Setup cfn-hup on ubuntu
          ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup || qs_err
          chmod 775 /usr/local/init/ubuntu/cfn-hup || qs_err
          update-rc.d cfn-hup defaults || qs_err
          # Node Registeration
          pip3 install noderegister 
          echo "Register Node to $REGISTER" 
          noderegister -r -D ${!REGISTER}
          noderegister -a {$DDACSeedNode1.HostId} -D ${!REGISTER}
          noderegister -l -D ${!REGISTER}
          #ddac install
          cfn-init -v --stack ${AWS::StackName} --resource DDACSeedNode1 --configsets full_install --region ${AWS::Region} || cfn_fail
          # Signal cfn-init (final check)
          [ $(qs_status) == 0 ] && cfn_success || cfn_fail

        - S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
Outputs:
  TableName:
    Value: !Ref DDBTable
    Description: NodeRegister DynamoDB table

