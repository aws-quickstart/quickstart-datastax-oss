---
AWSTemplateFormatVersion: 2010-09-09
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ' VPC Network Configuration'
        Parameters:
          - AvailabilityZones
          - VPCCIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - RemoteAccessCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
      - Label:
          default: 'DDAC Cluster/Nodes Configuration'
        Parameters:
          - DDACInstallType
          - DDACDevInstallNodeCount
          - ClusterName
          - DatacenterName
          - CreateClusterWithPublicIP
          - DDACInstanceType
          - DDACVolumeSize
          - EmailAddress
      - Label:
          default: 'Dev/Bastion Configuration'
        Parameters:
          - DevInstanceType
          - DevVolumeSize
          - KeyPairName
      - Label:
          default: 'Quick Start Configuration'
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      ClusterName:
        default: Name of the DDAC Cluster
      DatacenterName:
        default: Name of the Datacenter
      RemoteAccessCIDR:
        default: Permitted IP range
      AvailabilityZones:
        default: Availability Zones
      KeyPairName:
        default: Key Name
      DDACInstanceType:
        default: Instances Type for DDAC nodes
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      PrivateSubnet1CIDR:
        default: CIDR for 1st private subnet
      PrivateSubnet2CIDR:
        default: CIDR for 2nd private subnet
      PrivateSubnet3CIDR:
        default: CIDR for 3rd private subnet
Parameters:
  DDACInstallType:
    AllowedValues:
      - Dev
      - Standard
    ConstraintDescription: "Choose Dev or Standard."
    Default: Dev
    Description: "Dev install creates 1 or 2 Nodes. Standard install creates a cluster with 3 nodes autoscaleable to 6 nodes."
    Type: String
  DDACDevInstallNodeCount:
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: "Choose 1 or 2."
    Default: 1
    Description: "Number of nodes for DDACInstallType = Dev. If DDACInstallType = Standard, then this parameter is ignored."
    Type: Number
  EmailAddress:
    AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)"
    ConstraintDescription: "Must be a valid email id."
    Description: "Email Address for notification of ASG events"
    Type: String
  AvailabilityZones:
    Description: List of Availability Zones to use for the subnets in the VPC. The logical order of your selections is preserved.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  ClusterName:
    Description: The name of the DDAC Cluster.
    Type: String
    Default: DDAC-Cluster
  DatacenterName:
    Description: The name of the DDAC Datacenter.
    Type: String
    Default: DDAC-dc0
  DDACInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
    ConstraintDescription: "must be a valid EC2 instance type."
    Default: t2.medium
    Description: "EC2 instance type"
    Type: String
  DDACVolumeSize:
      Type: Number
      Description: "EBS volume size of the DDAC Cluster Nodes in GB"
      Default: 1024
  DevInstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: "must be a valid EC2 instance type."
    Default: t2.medium
    Description: "EC2 instance type"
    Type: String
  DevVolumeSize:
      Type: Number
      Description: "EBS volume size of the DevOps Instance in GB"
      Default: 16
  KeyPairName:
    ConstraintDescription: "Name of an existing EC2 KeyPair."
    Type: "AWS::EC2::KeyPair::KeyName"
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2
    Type: String
  PrivateSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.64.0/19
    Description: CIDR block for private subnet 3 located in Availability Zone 3
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public (DMZ) subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public (DMZ) subnet 2 located in Availability Zone 2
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: CIDR block for the public (DMZ) subnet 3 located in Availability Zone 3
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: quickstart-datastax-ddac/
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/x"
    Description: "Allowed CIDR block for external SSH access"
    Type: String
  CreateClusterWithPublicIP:
    Description: "Whether to create the DDAC Cluster nodes in public subnet"
    Type: String
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
Conditions:
  GovCloudCondition: !Equals
    - !Ref "AWS::Region"
    - us-gov-west-1
  CreateInPublicSubnet: !Equals
    - !Ref CreateClusterWithPublicIP
    - true
  CreateASG: !Equals
    - !Ref DDACInstallType
    - Standard
  Create2ndNode:
    !Or [!Equals [!Ref DDACDevInstallNodeCount, 2], !Equals [!Ref DDACInstallType, Standard]]
Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template
          - S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
      Parameters:
        AvailabilityZones: !Join
          - ","
          - !Ref AvailabilityZones
        KeyPairName: !Ref KeyPairName
        NumberOfAZs: "3"
        PrivateSubnet1ACIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2ACIDR: !Ref PrivateSubnet2CIDR
        PrivateSubnet3ACIDR: !Ref PrivateSubnet3CIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PublicSubnet3CIDR: !Ref PublicSubnet3CIDR
        VPCCIDR: !Ref VPCCIDR
  DDACSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH access and 8080.
      VpcId:  !GetAtt VPCStack.Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  SeedNodeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}templates/seednodes.yaml.template
          - S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
      Parameters:
        ClusterName: !Ref ClusterName
        DatacenterName: !Ref DatacenterName
        CreateClusterWithPublicIP: !Ref CreateClusterWithPublicIP
        Subnet1ID: !If [CreateInPublicSubnet, !GetAtt VPCStack.Outputs.PublicSubnet1ID, !GetAtt VPCStack.Outputs.PrivateSubnet1AID]
        Subnet2ID: !If [CreateInPublicSubnet, !GetAtt VPCStack.Outputs.PublicSubnet2ID, !GetAtt VPCStack.Outputs.PrivateSubnet2AID]
        InstanceType: !Ref DDACInstanceType
        VolumeSize: !Ref DDACVolumeSize
        KeyPairName: !Ref KeyPairName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSS3BucketName: !Ref QSS3BucketName
        DDACSecGroup: !GetAtt DDACSecGroup.GroupId
        DDACInstallType: !Ref DDACInstallType
        DDACDevInstallNodeCount: !Ref DDACDevInstallNodeCount
  DevNodeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}templates/dev.yaml.template
          - S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
      Parameters:
        PublicSubnet1ID: !GetAtt VPCStack.Outputs.PublicSubnet1ID
        InstanceType: !Ref DevInstanceType
        VolumeSize: !Ref DevVolumeSize
        KeyPairName: !Ref KeyPairName
        QSS3BucketName: !Ref QSS3BucketName
        DDACSecGroup: !GetAtt DDACSecGroup.GroupId
  ClusterNodeStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateASG
    Properties:
      TemplateURL:
        Fn::Sub:
          - https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}templates/datastax-ddac-clusternode.template.yaml
          - S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
      Parameters:
        ClusterName: !Ref ClusterName
        DatacenterName: !Ref DatacenterName
        EmailAddress: !Ref EmailAddress
        Subnet1ID: !If [CreateInPublicSubnet, !GetAtt VPCStack.Outputs.PublicSubnet1ID, !GetAtt VPCStack.Outputs.PrivateSubnet1AID]
        Subnet2ID: !If [CreateInPublicSubnet, !GetAtt VPCStack.Outputs.PublicSubnet2ID, !GetAtt VPCStack.Outputs.PrivateSubnet2AID]
        Subnet3ID: !If [CreateInPublicSubnet, !GetAtt VPCStack.Outputs.PublicSubnet3ID, !GetAtt VPCStack.Outputs.PrivateSubnet3AID]
        DDACSecGroup: !GetAtt DDACSecGroup.GroupId
        InstanceType: !Ref DDACInstanceType
        VolumeSize: !Ref DDACVolumeSize
        KeyPairName: !Ref KeyPairName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSS3BucketName: !Ref QSS3BucketName
        SeedNodeIps:
          !Join [
            ",",
            [
              !GetAtt SeedNodeStack.Outputs.Seed1PrivateIpAddress,
              !GetAtt SeedNodeStack.Outputs.Seed2PrivateIpAddress,
            ],
          ]
Outputs:
  Seed1PrivateIpAddress:
    Value: !GetAtt
      - SeedNodeStack
      - Outputs.Seed1PrivateIpAddress
    Description: 1st Seed Private IP
  Seed1PublicIpAddress:
    Value: !GetAtt
      - SeedNodeStack
      - Outputs.Seed1PublicIpAddress
    Description: 1st Seed IP
  Seed2PrivateIpAddress:
    Condition: Create2ndNode
    Value: !GetAtt
      - SeedNodeStack
      - Outputs.Seed2PrivateIpAddress
    Description: 2nd Seed Private IP
  Seed2PublicIpAddress:
    Condition: Create2ndNode
    Value: !GetAtt
      - SeedNodeStack
      - Outputs.Seed2PublicIpAddress
    Description: 2nd Seed Public IP
  DevIpAddress:
    Value: !GetAtt DevNodeStack.Outputs.DevIpAddress
    Description: Dev Jump box Public IP
  DDACUrl:
#    Value: !GetAtt DevNodeStack.Outputs.DDACUrl
    Value: "http://ddac-web.us-east-2.elasticbeanstalk.com/"
    Description: DDAC Url
